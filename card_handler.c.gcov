        -:    0:Source:card_handler.c
        -:    0:Graph:test_blackjack-card_handler.gcno
        -:    0:Data:test_blackjack-card_handler.gcda
        -:    0:Runs:9
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "blackjack.h"
        -:    5:
        -:    6:/*  Includes functions handling card and
        -:    7:    deck logic and initialization.
        -:    8:*/
        -:    9:
        -:   10:const char* suits[] = {"Hearts", "Diamonds", "Clubs", "Spades"};
        -:   11:const char* ranks[] = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};
        -:   12:
       21:   13:void initialize_deck(Card* deck) {
       21:   14:    int idx = 0;
      105:   15:    for (int suit = 0; suit < NUM_SUITS; suit++) {
     1176:   16:        for (int rank = 0; rank < NUM_RANKS; rank++) {
     1092:   17:            deck[idx].isDrawn = 0;
        -:   18:
        -:   19:            // build card name
     1092:   20:            strcpy(deck[idx].name, ranks[rank]); 
     1092:   21:            strcat(deck[idx].name, " of ");
     1092:   22:            strcat(deck[idx].name, suits[suit]);
        -:   23:            
     1092:   24:            deck[idx].value = (rank == 12) ? 11 : ((rank >= 9) ? 10 : (rank + 2)); // Face cards have a value of 10, others take their rank
     1092:   25:            idx++;
        -:   26:        }
        -:   27:    }
       21:   28:}
        -:   29:
       42:   30:void initialize_hand(Hand* hand) {
       42:   31:    hand->value = 0;
       42:   32:    hand->cardCount = 0;
       42:   33:    hand->bet = 0;
       42:   34:}
        -:   35:
        -:   36://void initialize_hand(Player* player){
        -:   37://	player->hands = malloc(sizeof(Hand));
        -:   38://}
        -:   39:
        -:   40:// adjusting hand value based on special value aces
      128:   41:void ace_adjuster(Hand* hand){
      401:   42:        for(int i=0; i<hand->cardCount; i++){
      273:   43:                if(hand->cards[i].value == 11){
       13:   44:			if(hand->value > 21){
        5:   45:				hand->value -= 10; // adjusting hand value
        5:   46:                		hand->cards[i].value -= 10; // adjusting ace value from 11 to 1
        -:   47:        		}		
        -:   48:		}
        -:   49:	}
        -:   50:	
      128:   51:}
        -:   52:
        -:   53:
      135:   54:void draw_card(Card* deck, Hand* hand) {
        -:   55:    // Randomly select a card
        -:   56:    int cardIndex;
        -:   57:    do {
      135:   58:        cardIndex = rand() % NUM_CARDS;
      135:   59:    } while (deck[cardIndex].isDrawn);
        -:   60:    
      128:   61:    deck[cardIndex].isDrawn = 1;
        -:   62:
        -:   63:    // Add card to hand
      128:   64:    hand->cards[hand->cardCount] = deck[cardIndex];
      128:   65:    hand->cardCount++;
        -:   66:
      128:   67:    hand->value += deck[cardIndex].value;
        -:   68:
        -:   69:    // accounting for possible aces
      128:   70:    ace_adjuster(hand);
      128:   71:}
