        -:    0:Source:game_result.c
        -:    0:Graph:test_blackjack-game_result.gcno
        -:    0:Data:test_blackjack-game_result.gcda
        -:    0:Runs:9
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include "blackjack.h"
        -:    4:#include<time.h>
        -:    5:
        -:    6:// Function to print the cards in a hand and its total value
       21:    7:void reveal_hand(Hand *hand, const char *card_holder) {
       21:    8:    printf("%s's hand: ", card_holder); // Print whose hand is holding a particular set of cards (i.e., Player or Dealer)
       83:    9:    for (int i = 0; i < hand->cardCount; i++) {
       62:   10:        printf("%s, ", hand->cards[i].name); // Print each card in the hand
        -:   11:    }
       21:   12:    printf("\nValue: %d\n", hand->value); // Print the total value of the hand
       21:   13:}
        -:   14:
        -:   15:// Function for the dealer to play its turn
       21:   16:void play_dealer(Card *deck, Hand *dealerHand) {
        -:   17:    // Dealer must draw cards until their hand value is at least 17
       83:   18:    while (dealerHand->value < 17) {
       62:   19:        draw_card(deck, dealerHand);
        -:   20:    }
       21:   21:    reveal_hand(dealerHand, "Dealer");
       21:   22:}
        -:   23:
        -:   24:// Function to get the game result
        -:   25:// Side-effect, updates payout
       21:   26:char *game_result(Hand *playerHand, Hand *dealerHand, int *payout) {
        -:   27:    // bust if hand value exceeds 21
        -:   28:    // If the dealer busts, player wins. 
        -:   29:    // If the dealer doesn't bust, player wins if their hand values higher than dealer's
        -:   30:    
       21:   31:    if (playerHand->value > 21) {
       12:   32:        *payout = 0;
       12:   33:        return "Bust! Player lost.\n";
        -:   34:    }
        -:   35:    // 5-Card Charlie
       9*:   36:    else if (playerHand->cardCount >= NUM_CHARLIE && playerHand->value <= 21) {
    #####:   37:        *payout *= 2;
    #####:   38:        return "Player wins by 5-card Charlie.\n";
        -:   39:    }
        -:   40:    // Player wins with 'Blackjack' if and only if the very first 2 cards of the player's hand has the cumulative value of 21.
        9:   41:    else if (playerHand->value == 21 && playerHand->cardCount == 2) {
    #####:   42:        *payout *= 2.5;
    #####:   43:        return "Blackjack! Player wins.\n";
        -:   44:    }
        -:   45:    // Player wins if dealer busts or player has a higher hand value (obviously not exceeding 21) at any point of the game
        9:   46:    else if (dealerHand->value > 21 || playerHand->value > dealerHand->value) {
        4:   47:        *payout *= 2;
        4:   48:        return "Yay! Player won.\n";
        -:   49:    }
        -:   50:    // Dealer wins if their hand is higher
        5:   51:    else if (playerHand->value < dealerHand->value) {
        4:   52:        *payout = 0;
        4:   53:        return "Dealer wins. Wishing the best of luck for next round of play!\n";
        -:   54:    }
        -:   55:    // It is considered a push if both have the same hand value
        -:   56:    else {
        1:   57:        return "Push! Player got their bet back.\n";
        -:   58:    }
        -:   59:}
        -:   60:
        -:   61:
