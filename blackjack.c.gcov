        -:    0:Source:blackjack.c
        -:    0:Graph:test_blackjack-blackjack.gcno
        -:    0:Data:test_blackjack-blackjack.gcda
        -:    0:Runs:9
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <time.h>
        -:    5:#include "blackjack.h"
        -:    6:#include <stdbool.h>
        -:    7:
        -:    8:/*  Main logic for Blackjack utility, including 
        -:    9:    call from command line and game loop and
        -:   10:    initialization.
        -:   11:*/
        -:   12:
        -:   13:// get_input returns whether user input is yes or not
       18:   14:bool get_input(){
        -:   15:	char input;
       18:   16:	scanf(" %c", &input);
       18:   17:    if (input == 'y' || input == 'Y') {
       12:   18:        return true;
        -:   19:    }
        6:   20:	return false;
        -:   21:}
        -:   22:
       21:   23:int get_initial_bet() {
        -:   24:    // handle initial bet
       21:   25:    int initialBet = 0;
       21:   26:    printf("Enter the bet amount: $");
       21:   27:    scanf("%d", &initialBet);
       21:   28:    return initialBet != 0 ? initialBet : 100;
        -:   29:}
        -:   30:
       21:   31:void deal_player_hand(Card *deck, Hand *playerHand) {
        -:   32:    // draw initial two cards
       63:   33:    for (int i = 0; i < 2; i++) {
       42:   34:        draw_card(deck, playerHand);
       42:   35:        printf("You drew: %s\n", playerHand->cards[i].name);
        -:   36:    }
       21:   37:    printf("The value of your hand is: %d\n", playerHand->value);
       21:   38:}
        -:   39:
       33:   40:void player_hit_loop(Card *deck, Hand *playerHand) {
        -:   41:    char continuePlaying;
        -:   42:
        -:   43:    do {
       33:   44:        printf("Would you like to draw another card? (y/n): ");
       33:   45:        scanf(" %c", &continuePlaying);
       33:   46:        if (continuePlaying == 'y' || continuePlaying == 'Y') {
       24:   47:            draw_card(deck, playerHand);
       24:   48:            printf("You drew: %s\n", playerHand->cards[playerHand->cardCount - 1].name);
       24:   49:            printf("Your hand value is: %d\n", playerHand->value);
        -:   50:
       24:   51:            if (playerHand->value > 21 || playerHand->cardCount >= NUM_CHARLIE) {
        -:   52:                //printf("Bust! Your hand value exceeded 21. Game over.\n");
        -:   53:                break;
        -:   54:            }
        -:   55:        }
       21:   56:    } while (continuePlaying == 'y' || continuePlaying == 'Y');
       21:   57:}
        -:   58:
        -:   59:// main game logic
       21:   60:void play_blackjack(int *balance) {
        -:   61:    // initialization
        -:   62:    Card deck[NUM_CARDS];
        -:   63:    Hand playerHand;
        -:   64:    Hand dealerHand;
       21:   65:    srand((unsigned int)time(NULL)); // Setup random seed
        -:   66:
       21:   67:    initialize_deck(deck);
       21:   68:    initialize_hand(&playerHand);
       21:   69:    initialize_hand(&dealerHand);
       21:   70:    int initialBet = get_initial_bet();
       21:   71:    playerHand.bet = initialBet;
        -:   72:
       21:   73:    deal_player_hand(deck, &playerHand);
        -:   74:
        -:   75:    // player hit/stand loop
       21:   76:    player_hit_loop(deck, &playerHand);
        -:   77:
        -:   78:    // dealer's turn
       21:   79:    printf("\nDealer's Turn:\n");
       21:   80:    play_dealer(deck, &dealerHand);
        -:   81:
        -:   82:    // handle the game result
       21:   83:    int payout = playerHand.bet;
       21:   84:    char *result_msg = game_result(&playerHand, &dealerHand, &payout);
       21:   85:    printf("\n%s\n", result_msg);
       21:   86:    int balanceDiff =  (payout - playerHand.bet);
       21:   87:    *balance += balanceDiff;
       21:   88:    printf("You bet $%d and earned: $%d\n", playerHand.bet, balanceDiff);
       21:   89:    printf("Current balance: $%d\n\n", *balance);
       21:   90:}
        -:   91:
        9:   92:void blackjack_manager() {
        9:   93:    int balance = 500;
        9:   94:    printf("Welcome to Blackjack!\n");
        9:   95:    printf("\nBalance: $%d\n", balance);
        -:   96:    
        9:   97:    play_blackjack(&balance);
        -:   98:
       21:   99:    while (balance > 0) {
       18:  100:        printf("Continue? (y/n)\n");
       18:  101:        if (get_input() == false) {
        6:  102:            break;
        -:  103:        }
       12:  104:        play_blackjack(&balance);
        -:  105:    }
        9:  106:    if (balance <= 0) {
        3:  107:        printf("\nYou're broke. Bye\n");
        -:  108:    } else {
        6:  109:        printf("You started with $500 and left with $%d\n", balance);
        -:  110:    }
        9:  111:}
        -:  112:
        -:  113:
        -:  114:// command line call
        9:  115:int main() {
        9:  116:    blackjack_manager();
        9:  117:    return 0;
        -:  118:}
